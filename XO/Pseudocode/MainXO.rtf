{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww9000\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5288\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs32 \cf0 HOMEPAGE -> SET-UP GAME -> REFRESH-UI -> PLAYER INTERACTION ->  CHECK FOR VALIDITY -> CHECK FOR END CONDITIONS -> UPDATE-UI -> CONTINUE GAME OR END GAME\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0 \
- Initialise the main noughts & crosses board:\
	// Two layer X&O game, outer layer (the war, MainXO - Main Board), inner layer (the battles, SimpleXO - Mini Board)\
	- create a 3 by 3 grid with a mini noughts & crosses board objects within each cell 	- each cell in main board can be complete (won or drawn), incomplete (not won or drawn)\
		- hence each cell can contain a SimpleXO object, draw symbol or the player's winning symbol (either X or O)\
		- If within a inner layer the winning conditions is met then\
			- Hide the SimpleXO gameplay in the cell\
			- Then mark the cell with the avatar of the player that met the winning condition\
			- Plus update cell as complete\
		- Else winning condition in SimpleXO not met\
			- Check for draw conditions and if met then\
				- Hide the SimpleXO gameplay in the cell\
				- Mark cell with draw symbol \
				- Update cell as complete\
			- Else winning and draw condition in SimpleXO is not met\
				- Cell is incomplete and is playable\
	- the cells of a mini board can be either empty, X or O\
\
- Assign the users to their avatars, X or O\
\
- Initialise the current player (starting with X)\
\
- Repeat until the game is over: (For loop to end a player would have won or the draw condition must have been met)\
\
	- Display the current state of the main board (81 playable squares):\
		- Showcase 9 main boards cells containing a preview of each of the mini board games	\
	- UI feature:\
		- By player selecting a main board cell they can zoom in to the mini board\
		- Then the player can go back to see the main board\
	\
	- Get the main board cell for player \
		- If this is the first move then \
			- The current player will select the main board cell to continue with their move\
		- Else not the first move\
			- The playable main board cell will be based on the corresponding cell of the previous move made in the mini board\
			- If the main board cell is marked as complete then\
				- Check if the targeted main board cell was the centre cell \
					- If was then current player can select any of the main board cells to make a move in\
				- The player can then select any of the main board cells that surround the initial targeted cell (cells with a proximity of 1)\
				- If the cells with a proximity of 1 are all marked as complete\
					- Then the player can select any of the remaining cells (cells with a proximity of 2)\
			- Else not marked as complete\
				- Continue the game with the targeted cell\
					\
	- Ask the current player for a move in the selected or targeted main board cell:\
\
	- Design Feature: \
		- Add an small main board overview screen that can be on or off in game settings \
		- Offers overview when zoomed in to a mini board\
		- UI Feature:\
			- Can click on the main board to zoom in to the current main board state and zoom out back to current playable mini board\
		Or\
		- UI Feature:\
			- The player has access to move back to the main board but only in preview mode\
	\
	- Initialise timer mechanism for game:\
		- Each player has 10, 15 or 30 seconds to make a move\
\
	- Current Player has a method called playerMoveInMain and is able to\
		- Input to select a mini board in main board\
			- User can cancel the selected mini board and choose another until timer runs out or move is made in mini board\
\
	- Current Player has a method called playerMoveInMini and is able to\
		- Input to select row and column in mini board to place symbol\
		\
	- If first move:\
		- Call the playerMoveInMain method\
		- Call the playerMoveInMini method\
	- Else not first move:\
		- Check for the main board cell/cells that is valid for player to make a move in\
		- If valid cells in main board more than one then:\
			- Call the playerMoveInMain method\
			- Call the playerMoveInMini method\
		- Else only one valid mini board \
			- Lock on the targeted mini board\
			- Call the playerMoveInMini method\
	\
	Check if the mini board input is valid: \
		- The cell should be empty\
		- The row and column should be within the valid range (0 to 2) \
\
	- If the move is valid:\
		- Place the current player's symbol in the chosen cell\
\
	- Check for a winner in the mini board:\
            - Check the rows, columns and diagonals for a three in a row of the same symbol \
\
	- If there is a winner in mini board:\
		- Hide the mini board\
		- Update the main board cell containing the mini board with the winner's symbol\
		- Mark the main board cell as complete\
	- Else check if the board is full:\
		- Update the main board with the draw symbol\
		- Hide the mini board\
		- Mark the main board cell as complete\
	- Else there is no winner and mini board contains empty cells so mini board is still playable:\
		- Main board cell remains incomplete\
\
	 - Check for a winner in the main board:\
            - Check the rows, columns and diagonals for a three in a row of the current player's symbol\
\
	- If there is a winner in the main board:\
		- Display the winner and break loop\
	- Else if the main board is full:\
		- Display a draw and break loop\
	- Else winning and draw conditions not met:\
	- Switch to the next player \
	- Continue with the loop\
\
- End the game \
\
\
\
}